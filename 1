Program 7
import numpy as np
import matplotlib.pyplot as plt
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error

# Generate data
np.random.seed(42)
X = np.sort(np.random.rand(100, 1) * 10, axis=0)
y = np.sin(X).ravel() + np.random.normal(0, 0.3, X.shape[0])
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)

# Model training and error calculation
train_err, test_err = [], []
for d in range(1, 15):
    model = DecisionTreeRegressor(max_depth=d).fit(X_train, y_train)
    train_err.append(mean_squared_error(y_train, model.predict(X_train)))
    test_err.append(mean_squared_error(y_test, model.predict(X_test)))

# Plot
plt.plot(range(1,15), train_err, 'o-b', label="Train Error")
plt.plot(range(1,15), test_err, 's-r', label="Test Error")
plt.xlabel("Tree Depth")
plt.ylabel("MSE")
plt.title("Bias-Variance Tradeoff")
plt.legend()
plt.grid()
plt.show()

program-10
import numpy as np

# Input and Output
X = np.array([[0.66666667, 1.0],
              [0.33333333, 0.55555556],
              [1.0, 0.66666667]])
y = np.array([[0.92], [0.86], [0.89]])

# Sigmoid & Derivative
def sigmoid(x): return 1 / (1 + np.exp(-x))
def sigmoid_deriv(x): return x * (1 - x)

# Initialize weights
np.random.seed(1)
w1 = np.random.rand(2, 4)  # 2 inputs -> 4 hidden
w2 = np.random.rand(4, 1)  # 4 hidden -> 1 output

# Training loop
for _ in range(10000):
    h = sigmoid(np.dot(X, w1))         # Hidden layer
    out = sigmoid(np.dot(h, w2))       # Output layer
    error = y - out
    d_out = error * sigmoid_deriv(out)
    d_h = d_out.dot(w2.T) * sigmoid_deriv(h)
    w2 += h.T.dot(d_out) * 0.1
    w1 += X.T.dot(d_h) * 0.1

# Final prediction
print(X)
print(y)
print("Predicted Output:\n", out)





ML-8
from mlxtend.frequent_patterns import apriori, association_rules
from mlxtend.preprocessing import TransactionEncoder
import pandas as pd

# Step 1 & 2: Dataset
dataset = [
    ['milk', 'bread', 'nuts', 'apple'],
    ['milk', 'bread', 'nuts'],
    ['milk', 'bread'],
    ['milk', 'bread', 'apple'],
    ['milk', 'bread', 'apple']

]
print(dataset)


# Step 3: Transaction encoding
te = TransactionEncoder()
te_ary = te.fit(dataset).transform(dataset)
df = pd.DataFrame(te_ary, columns=te.columns_)
print(df)

# Step 4 & 5: Frequent itemsets
frequent_itemsets = apriori(df, min_support=0.6, use_colnames=True)

# Step 6: Rules
rules = association_rules(frequent_itemsets, metric="lift", min_threshold=1)
print(frequent_itemsets)
print(rules)



